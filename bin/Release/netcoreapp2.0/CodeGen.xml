<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CodeGen</name>
    </assembly>
    <members>
        <member name="T:CodeGen.ExecuteConf">
            <summary>
            The configuration for execution, contains the application flow
            </summary>
        </member>
        <member name="M:CodeGen.ExecuteConf.Execute">
            <summary>
            The main flow of application
            </summary>
        </member>
        <member name="T:CodeGen.generators.CSharpGenerator">
            <inheritdoc />
            <summary>
            C# language generator
            </summary>
        </member>
        <member name="M:CodeGen.generators.CSharpGenerator.GenerateClass(CodeGen.generators.Class)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.CSharpGenerator.GenerateField(CodeGen.generators.Field)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.CSharpGenerator.GenerateMethod(CodeGen.generators.Method)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.CSharpGenerator.GenerateGettersSetters(System.Collections.Generic.IEnumerable{CodeGen.generators.Field})">
            <summary>
            
            </summary>
            <param name="fields"></param>
            <returns></returns>
        </member>
        <member name="M:CodeGen.generators.CSharpGenerator.GenerateGetter(CodeGen.generators.Variable)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="M:CodeGen.generators.CSharpGenerator.GenerateSetter(CodeGen.generators.Variable)">
            <summary>
            
            </summary>
            <param name="field"></param>
            <returns></returns>
        </member>
        <member name="T:CodeGen.generators.ES6Generator">
            <inheritdoc />
            <summary>
            Generator for JavaScript ES6 
            </summary>
        </member>
        <member name="M:CodeGen.generators.ES6Generator.GenerateClass(CodeGen.generators.Class)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.ES6Generator.GenerateField(CodeGen.generators.Field)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.ES6Generator.GenerateMethod(CodeGen.generators.Method)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.ES6Generator.GenerateMethodWithBody(CodeGen.generators.Method,System.String)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:CodeGen.generators.ES6Generator.GenerateInit(CodeGen.generators.Class)">
            <summary>
            
            </summary>
            <param name="class"></param>
            <returns></returns>
        </member>
        <member name="T:CodeGen.generators.Generator">
            <summary>
            Interface of language generator
            </summary>
        </member>
        <member name="F:CodeGen.generators.Generator.UseTabs">
            <summary>
            
            </summary>
        </member>
        <member name="M:CodeGen.generators.Generator.Generate(CodeGen.generators.Package)">
            <summary>
            Package generator: generates package with classes and subpackages from given package object
            </summary>
            <param name="pkg">Package object</param>
            <returns>Dictionary of file names (keys) and generated code (values)</returns>
        </member>
        <member name="M:CodeGen.generators.Generator.GenerateClass(CodeGen.generators.Class)">
            <summary>
            Class generator: generates class with fields, methods and subclasses from given class object
            </summary>
            <param name="class">Class object</param>
            <returns>String of generated code of class</returns>
        </member>
        <member name="M:CodeGen.generators.Generator.GenerateField(CodeGen.generators.Field)">
            <summary>
            Field generator: generates field from given field object
            </summary>
            <param name="field">Field object</param>
            <returns>String of generated code of field</returns>
        </member>
        <member name="M:CodeGen.generators.Generator.GenerateMethod(CodeGen.generators.Method)">
            <summary>
            Method generator: generates method from given method object
            </summary>
            <param name="method">Method object</param>
            <returns>String of generated code of method</returns>
        </member>
        <member name="T:CodeGen.generators.Normalizer">
            <summary>
            Interface of language normalizer: normalizes package data according to specified language
            </summary>
        </member>
        <member name="M:CodeGen.generators.Normalizer.NormalizePackage(CodeGen.generators.Package)">
            <summary>
            Package normalizer: normalizes package with classes and subpackages
            </summary>
            <param name="pkg">Package object</param>
            <returns>Normalized package object</returns>
        </member>
        <member name="M:CodeGen.generators.Normalizer.NormalizeClass(CodeGen.generators.Class)">
            <summary>
            Class normalizer: normalizes class with fields, methods and subclasses
            </summary>
            <param name="class">Class object</param>
            <returns>Normalized class object</returns>
        </member>
        <member name="M:CodeGen.generators.Normalizer.NormalizeField(CodeGen.generators.Field)">
            <summary>
            Field normalizer: normalizes field
            </summary>
            <param name="field">Field object</param>
            <returns>Normalized field object</returns>
        </member>
        <member name="M:CodeGen.generators.Normalizer.NormalizeMethod(CodeGen.generators.Method)">
            <summary>
            Method normalizer: normalizes method
            </summary>
            <param name="method">Method object</param>
            <returns>Normalized method object</returns>
        </member>
        <member name="M:CodeGen.generators.Normalizer.NormalizeParameter(CodeGen.generators.Parameter)">
            <summary>
            Parameter normalizer: normalizes parameter
            </summary>
            <param name="parameter">Parameter object</param>
            <returns>Normalized parameter object</returns>
        </member>
        <member name="T:CodeGen.generators.Languange">
            <summary>
            The class that describes programming language and has a generator for it
            </summary>
        </member>
        <member name="F:CodeGen.generators.Languange.Generator">
            <summary>
            Holds the generator of the language. Field is read only
            </summary>
        </member>
        <member name="F:CodeGen.generators.Languange.Extension">
            <summary>
            Holds the extension of the file. Field is read only
            </summary>
        </member>
        <member name="F:CodeGen.generators.Languange.Comment">
            <summary>
            Holds comment format. Field is read only
            </summary>
        </member>
        <member name="F:CodeGen.generators.Languange._normalizer">
            <summary>
            Holds language normalizer. Field is read only
            </summary>
        </member>
        <member name="F:CodeGen.generators.Languange.IndentSize">
            <summary>
            The size of identation (works if using spaces, else 1 tab)
            </summary>
        </member>
        <member name="M:CodeGen.generators.Languange.#ctor(CodeGen.generators.Generator,System.String,System.String,CodeGen.generators.Normalizer,System.Int32)">
            <summary>
            Constructor for language, used to avoid struct initializers
            </summary>
            <param name="generator">Language generator</param>
            <param name="extension">File extension</param>
            <param name="comment">Comment format</param>
            <param name="normalizer">Language normalizer</param>
            <param name="indentSize">The size of identation (works if using spaces, else 1 tab)</param>
        </member>
        <member name="T:CodeGen.generators.GeneratorConf">
            <summary>
            Holds the configuration of generator
            </summary>
        </member>
        <member name="F:CodeGen.generators.GeneratorConf.ExamplePkg">
            <summary>
            Contains example package
            </summary>
        </member>
        <member name="F:CodeGen.generators.GeneratorConf.Languanges">
            <summary>
            Dictionary of language names (keys) and its Language objects (values) 
            </summary>
        </member>
        <member name="M:CodeGen.generators.GeneratorConf.GetIndent(System.Boolean,System.Int32)">
            <summary>
            Creates indent using given parameters
            </summary>
            <param name="tabs">Use tabs or spaces</param>
            <param name="tabStop">Number of spaces</param>
            <returns>Indent string</returns>
        </member>
        <member name="M:CodeGen.generators.GeneratorConf.ShiftCode(System.String,System.Int32,System.String)">
            <summary>
            Shifts code using given parameters
            </summary>
            <param name="code">Code to be shifted</param>
            <param name="num">Number of indents</param>
            <param name="indent">Indent string</param>
            <returns>Shifted code</returns>
        </member>
        <member name="M:CodeGen.generators.GeneratorConf.NormalizeLang(System.String)">
            <summary>
            Converts given language into language which is used for identification of generator
            </summary>
            <param name="lang">Inputed language</param>
            <returns>Normalized language</returns>
        </member>
        <member name="M:CodeGen.generators.GeneratorConf.GetLanguage(System.String)">
            <summary>
            Creates generator if it exists, else throws an error
            </summary>
            <param name="name">name of a language</param>
            <returns>language</returns>
            <exception cref="T:System.IndexOutOfRangeException">If the language is not found</exception>
        </member>
        <member name="T:CodeGen.generators.GoGenerator">
            <inheritdoc />
            <summary>
            Go language generator
            </summary>
        </member>
        <member name="M:CodeGen.generators.GoGenerator.GenerateClass(CodeGen.generators.Class)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.GoGenerator.GenerateField(CodeGen.generators.Field)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.GoGenerator.GenerateMethod(CodeGen.generators.Method)">
            <inheritdoc />
        </member>
        <member name="T:CodeGen.generators.GroovyGenerator">
            <inheritdoc />
            <summary>
            Groovy language generator
            </summary>
        </member>
        <member name="M:CodeGen.generators.GroovyGenerator.GenerateClass(CodeGen.generators.Class)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.GroovyGenerator.GenerateField(CodeGen.generators.Field)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.GroovyGenerator.GenerateMethod(CodeGen.generators.Method)">
            <inheritdoc />
        </member>
        <member name="T:CodeGen.generators.JavaGenerator">
            <inheritdoc />
            <summary>
            Java language generator
            </summary>
        </member>
        <member name="M:CodeGen.generators.JavaGenerator.GenerateClass(CodeGen.generators.Class)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.JavaGenerator.GenerateField(CodeGen.generators.Field)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.JavaGenerator.GenerateMethod(CodeGen.generators.Method)">
            <inheritdoc />
        </member>
        <member name="T:CodeGen.generators.Package">
            <summary>
            The structure that describes package. Contains classes and subpackages
            </summary>
        </member>
        <member name="P:CodeGen.generators.Package.Name">
            <summary>
            Represents the name of the package. Type: string 
            </summary>
        </member>
        <member name="P:CodeGen.generators.Package.UseSpaces">
            <summary>
            Represents using of spaces or tabs. Type: boolean
            </summary>
        </member>
        <member name="P:CodeGen.generators.Package.Classes">
            <summary>
            Represents classes. Type: array of type Class
            </summary>
        </member>
        <member name="P:CodeGen.generators.Package.Packages">
            <summary>
            Represents subpackages. Type: array of type Package
            </summary>
        </member>
        <member name="M:CodeGen.generators.Package.ToString">
            <inheritdoc />
        </member>
        <member name="T:CodeGen.generators.Class">
            <summary>
            The structure that describes class.
            Contains name, array of fields, methods and subclasses,
            parent class name, access specifier. Overrides ToString() method.
            </summary>
        </member>
        <member name="P:CodeGen.generators.Class.Name">
            <summary>
            Represents the name of the class. Type: string
            </summary>
        </member>
        <member name="P:CodeGen.generators.Class.Fields">
            <summary>
            Represents fields of the class. Type: array of type Field
            </summary>
        </member>
        <member name="P:CodeGen.generators.Class.Methods">
            <summary>
            Represents methods of the class. Type: array of type Method
            </summary>
        </member>
        <member name="P:CodeGen.generators.Class.Classes">
            <summary>
            Represents subclasses of the class. Type: array of type Class
            </summary>
        </member>
        <member name="P:CodeGen.generators.Class.Parent">
            <summary>
            Represents parent class name. Type: string
            </summary>
        </member>
        <member name="P:CodeGen.generators.Class.Access">
            <summary>
            Represents access level of the class. Type: string
            </summary>
        </member>
        <member name="M:CodeGen.generators.Class.ToString">
            <inheritdoc />
        </member>
        <member name="T:CodeGen.generators.Variable">
            <summary>
            The structure that describes variable. Contains name, type and default value
            </summary>
        </member>
        <member name="P:CodeGen.generators.Variable.Name">
            <summary>
            Represents the name of the variable. Type: string
            </summary>
        </member>
        <member name="P:CodeGen.generators.Variable.Type">
            <summary>
            Represents the type of the variable. Type: string
            </summary>
        </member>
        <member name="P:CodeGen.generators.Variable.Default">
            <summary>
            Represents default value of the varibale. Type: string
            </summary>
        </member>
        <member name="T:CodeGen.generators.Field">
            <inheritdoc />
            <summary>
            The structure that describes field. Contains access, const and static properties. Inherits from Variable
            </summary>
        </member>
        <member name="P:CodeGen.generators.Field.Access">
            <summary>
            Represents access level of the field. Type: string
            </summary>
        </member>
        <member name="P:CodeGen.generators.Field.Const">
            <summary>
            Denotes if field is constant or not. Type: boolean
            </summary>
        </member>
        <member name="P:CodeGen.generators.Field.Static">
            <summary>
            Denotes if field is static or not. Type: boolean
            </summary>
        </member>
        <member name="P:CodeGen.generators.Field.Getter">
            <summary>
            Denotes if generate getter or not. Type: boolean
            </summary>
        </member>
        <member name="P:CodeGen.generators.Field.Setter">
            <summary>
            Denotes if generate setter or not. Type: boolean
            </summary>
        </member>
        <member name="T:CodeGen.generators.Parameter">
            <inheritdoc />
            <summary>
            The structure that describes parameter. Inherits from Variable
            </summary>
        </member>
        <member name="T:CodeGen.generators.Method">
            <summary>
            The structure that describes method. Contains name, return type, access level, const and static properties
            and array of parameters 
            </summary>
        </member>
        <member name="P:CodeGen.generators.Method.Name">
            <summary>
            Represents the name of the method. Type: string
            </summary>
        </member>
        <member name="P:CodeGen.generators.Method.Return">
            <summary>
            Represents return type of the method. Type: string
            </summary>
        </member>
        <member name="P:CodeGen.generators.Method.Access">
            <summary>
            Represents access level of the method. Type: string
            </summary>
        </member>
        <member name="P:CodeGen.generators.Method.Const">
            <summary>
            Denotes if the method is const or not. Type: boolean
            </summary>
        </member>
        <member name="P:CodeGen.generators.Method.Static">
            <summary>
            Denotes if the mathod is static or not. Type: boolean
            </summary>
        </member>
        <member name="P:CodeGen.generators.Method.Parameters">
            <summary>
            Represents parameters of the method. Type: array of type Parameter
            </summary>
        </member>
        <member name="T:CodeGen.generators.PythonGenerator">
            <inheritdoc />
            <summary>
            Python language generator
            </summary>
        </member>
        <member name="M:CodeGen.generators.PythonGenerator.GenerateClass(CodeGen.generators.Class)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.PythonGenerator.GenerateField(CodeGen.generators.Field)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.PythonGenerator.GenerateMethod(CodeGen.generators.Method)">
            <inheritdoc />
        </member>
        <member name="T:CodeGen.generators.RubyGenerator">
            <inheritdoc />
            <summary>
            Ruby language generator
            </summary>
        </member>
        <member name="M:CodeGen.generators.RubyGenerator.GenerateClass(CodeGen.generators.Class)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.RubyGenerator.GenerateField(CodeGen.generators.Field)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.RubyGenerator.GenerateMethod(CodeGen.generators.Method)">
            <inheritdoc />
        </member>
        <member name="T:CodeGen.generators.VbGenerator">
            <inheritdoc />
            <summary>
            Visual Basic language generator
            </summary>
        </member>
        <member name="M:CodeGen.generators.VbGenerator.GenerateClass(CodeGen.generators.Class)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.VbGenerator.GenerateField(CodeGen.generators.Field)">
            <inheritdoc />
        </member>
        <member name="M:CodeGen.generators.VbGenerator.GenerateMethod(CodeGen.generators.Method)">
            <inheritdoc />
        </member>
        <member name="T:CodeGen.generators.VbNormalizer">
            <inheritdoc />
        </member>
        <member name="T:CodeGen.parser.Parser">
            <summary>
            Parser
            </summary>
        </member>
        <member name="M:CodeGen.parser.Parser.Read(System.String)">
            <summary>
            Reads file by file path
            </summary>
            <param name="name">Path to file</param>
            <returns>File content</returns>
            <exception cref="T:System.IO.FileNotFoundException">Throws if file does not exist</exception>
        </member>
        <member name="M:CodeGen.parser.Parser.Write(System.String,System.String)">
            <summary>
            Writes string to a file
            </summary>
            <param name="path">Path to new file</param>
            <param name="fileContext">Content of a file</param>
        </member>
        <member name="M:CodeGen.parser.Parser.Download(System.String)">
            <summary>
            Downloads file from the server by url
            </summary>
            <param name="url">Path to file on the server</param>
            <returns>File content</returns>
        </member>
        <member name="M:CodeGen.parser.Parser.ValidateArgs(System.String,System.String,System.String)">
            <summary>
            Validates arguments given from command line
            </summary>
            <param name="lang">Programming language</param>
            <param name="file">Path to local file</param>
            <param name="url">Path to file on the server</param>
            <exception cref="T:System.IO.InvalidDataException">Throws if some of arguments are invalid</exception>
        </member>
        <member name="M:CodeGen.parser.Parser.GetFileFormat(System.String)">
            <summary>
            Gets file format by extension
            </summary>
            <param name="name">File name</param>
            <returns>File extension</returns>
            <exception cref="T:System.IO.InvalidDataException">Throws if file has no extension</exception>
        </member>
        <member name="M:CodeGen.parser.Parser.Title(System.String)">
            <summary>
            Converts first letter of the string to upper case and others to lower case
            </summary>
            <param name="string">String to transform</param>
            <returns>Transformed string</returns>
        </member>
        <member name="T:CodeGen.tests.generators.GeneratorConfTest">
            <summary>
            
            </summary>
        </member>
        <member name="M:CodeGen.tests.generators.GeneratorConfTest.GetIndentTest">
            <summary>
            
            </summary>
        </member>
        <member name="M:CodeGen.tests.generators.GeneratorConfTest.ShiftCodeTest">
            <summary>
            
            </summary>
        </member>
        <member name="M:CodeGen.tests.generators.GeneratorConfTest.NormalizeLangTest">
            <summary>
            
            </summary>
        </member>
        <member name="M:CodeGen.tests.generators.GeneratorConfTest.GetLanguageTest">
            <summary>
            
            </summary>
        </member>
        <member name="T:CodeGen.tests.parser.ParserTest">
            <summary>
            
            </summary>
        </member>
        <member name="M:CodeGen.tests.parser.ParserTest.GetFileFormatTest">
            <summary>
            
            </summary>
        </member>
        <member name="M:CodeGen.tests.parser.ParserTest.ValidateArgsTest">
            <summary>
            
            </summary>
        </member>
        <member name="T:CodeGen.utils.Utils">
            <summary>
            
            </summary>
        </member>
    </members>
</doc>
